-- Grow a Garden Local Cloning Script for Delta Executor
-- Safe, visual, local script with Rayfield GUI for cloning Backpack items
-- Features: Pets/Fruits tabs with icons, Age/Weight customization, dynamic Age field visibility

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Load Rayfield Interface Suite
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/Rayfield/Rayfield/main/Loader.lua'))()

-- Create GUI Window
local Window = Rayfield:CreateWindow({
    Name = "Grow a Garden Cloner",
    LoadingTitle = "Grow a Garden Cloner",
    LoadingSubtitle = "by xAI User",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "GrowAGardenCloner",
        FileName = "Config"
    }
})

-- Function to get item thumbnail (simplified, using asset ID or fallback)
local function getItemThumbnail(item)
    -- Placeholder: In a real implementation, fetch thumbnail via Roblox API or asset ID
    -- For simplicity, return item name as fallback (Rayfield dropdowns don't natively support images)
    return item.Name
end

-- Function to check if item name contains excluded words
local function isExcludedItem(itemName)
    local excludedWords = {"Favorite", "Trowel", "Shovel", "Spray", "Recall", "Sprinkler", "Glass", "Egg"}
    for _, word in ipairs(excludedWords) do
        if string.find(string.lower(itemName), string.lower(word)) then
            return true
        end
    end
    return false
end

-- Function to get valid items from Backpack
local function getBackpackItems()
    local pets = {}
    local fruits = {}
    for _, item in pairs(Backpack:GetChildren()) do
        if item:IsA("Tool") and not isExcludedItem(item.Name) then
            local ageAttr = item:GetAttribute("Age")
            local itemName = getItemThumbnail(item)
            if ageAttr then
                table.insert(pets, itemName)
            else
                table.insert(fruits, itemName)
            end
        end
    end
    return pets, fruits
end

-- Function to clone item with modified attributes and name
local function cloneItem(itemName, weight, age)
    for _, item in pairs(Backpack:GetChildren()) do
        if item:IsA("Tool") and getItemThumbnail(item) == itemName then
            local clonedItem = item:Clone()
            clonedItem.Parent = Backpack
            -- Set attributes
            clonedItem:SetAttribute("Weight", weight)
            if age and clonedItem:GetAttribute("Age") then
                clonedItem:SetAttribute("Age", age)
            end
            -- Update name with [x.xx KG] [Age x] format
            local weightStr = string.format("[%.2f KG]", weight)
            local ageStr = age and string.format("[Age %d]", age) or ""
            clonedItem.Name = item.Name .. " " .. weightStr .. " " .. ageStr
            Rayfield:Notify({
                Title = "Item Cloned",
                Content = "Cloned " .. itemName .. " with Weight: " .. weight .. (age and " and Age: " .. age or ""),
                Duration = 3
            })
            break
        end
    end
end

-- Create Pets Tab
local PetsTab = Window:CreateTab("Pets", nil) -- No icon, using text for simplicity
local pets, fruits = getBackpackItems()

local PetDropdown = PetsTab:CreateDropdown({
    Name = "Select Pet",
    Options = pets,
    CurrentOption = pets[1] or "No Pets Available",
    Callback = function(option)
        -- Store selected pet
        getgenv().SelectedPet = option
    end
})

local WeightInputPets = PetsTab:CreateInput({
    Name = "Weight (KG)",
    PlaceholderText = "Enter weight (e.g., 10.5)",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        getgenv().PetWeight = tonumber(text) or 10
    end
})

local AgeInput = PetsTab:CreateInput({
    Name = "Age",
    PlaceholderText = "Enter age (e.g., 5)",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        getgenv().PetAge = tonumber(text) or 1
    end
})

local ClonePetButton = PetsTab:CreateButton({
    Name = "Clone Pet",
    Callback = function()
        if getgenv().SelectedPet and getgenv().PetWeight then
            cloneItem(getgenv().SelectedPet, getgenv().PetWeight, getgenv().PetAge)
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Please select a pet and enter a valid weight.",
                Duration = 3
            })
        end
    end
})

-- Create Fruits Tab
local FruitsTab = Window:CreateTab("Fruits", nil)
local FruitDropdown = FruitsTab:CreateDropdown({
    Name = "Select Fruit",
    Options = fruits,
    CurrentOption = fruits[1] or "No Fruits Available",
    Callback = function(option)
        getgenv().SelectedFruit = option
        -- Hide Age input when Fruits tab is active
        AgeInput:SetVisibility(false)
    end
})

local WeightInputFruits = FruitsTab:CreateInput({
    Name = "Weight (KG)",
    PlaceholderText = "Enter weight (e.g., 10.5)",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        getgenv().FruitWeight = tonumber(text) or 10
    end
})

local CloneFruitButton = FruitsTab:CreateButton({
    Name = "Clone Fruit",
    Callback = function()
        if getgenv().SelectedFruit and getgenv().FruitWeight then
            cloneItem(getgenv().SelectedFruit, getgenv().FruitWeight, nil)
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Please select a fruit and enter a valid weight.",
                Duration = 3
            })
        end
    end
})

-- Make Age input visible when switching back to Pets tab
PetsTab:OnTabOpened(function()
    AgeInput:SetVisibility(true)
end)

-- Refresh item lists periodically
local function refreshItems()
    local newPets, newFruits = getBackpackItems()
    PetDropdown:Set(newPets)
    FruitDropdown:Set(newFruits)
end

PetsTab:CreateButton({
    Name = "Refresh Items",
    Callback = refreshItems
})

FruitsTab:CreateButton({
    Name = "Refresh Items",
    Callback = refreshItems
})

-- Initial notification
Rayfield:Notify({
    Title = "Grow a Garden Cloner Loaded",
    Content = "Select a pet or fruit to clone and customize its attributes!",
    Duration = 5
})
